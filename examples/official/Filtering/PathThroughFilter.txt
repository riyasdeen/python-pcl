# Filtering a PointCloud using a PassThrough filter
# http://pointclouds.org/documentation/tutorials/passthrough.php#passthrough

import numpy as np
import pcl
import random

# int main (int argc, char** argv)
# pcl::PointCloud<pcl::PointXYZ>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZ>);
cloud = pcl.PointCloud()
# pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_filtered (new pcl::PointCloud<pcl::PointXYZ>);
cloud_filtered = pcl.PointCloud()

# // Fill in the cloud data
# cloud->width  = 5;
# cloud->height = 1;
# cloud->points.resize (cloud->width * cloud->height);
points = np.zeros((5, 3), dtype=np.float32)
RAND_MAX = 1.0

for i in range(0, 5):
	points[i].x = 1024 * random.random () / RAND_MAX
	points[i].y = 1024 * random.random () / RAND_MAX
	points[i].z = 1024 * random.random () / RAND_MAX

# std::cerr << "Cloud before filtering: " << std::endl;
# for (size_t i = 0; i < cloud->points.size (); ++i)
# for i in range(0, 5):
# std::cerr << "    " << cloud->points[i].x << " " 
#                     << cloud->points[i].y << " " 
#                     << cloud->points[i].z << std::endl;

# Create the filtering object
# pcl::PassThrough<pcl::PointXYZ> pass;
# pass.setInputCloud (cloud);
pass = cloud.makePassThroughFilter()
pass.setFilterFieldName ("z");
pass.setFilterLimits (0.0, 1.0);
//pass.setFilterLimitsNegative (true);
pass.filter (*cloud_filtered);

# std::cerr << "Cloud after filtering: " << std::endl;
for (size_t i = 0; i < cloud_filtered->points.size (); ++i)
std::cerr << "    " << cloud_filtered->points[i].x << " " 
                    << cloud_filtered->points[i].y << " " 
                    << cloud_filtered->points[i].z << std::endl;

