from libc.stddef cimport size_t

from libcpp.vector cimport vector
from libcpp.string cimport string
from libcpp cimport bool

# main
cimport pcl_defs as cpp

# boost
from boost_shared_ptr cimport shared_ptr

# Base Interface
cdef extern from "pcl/Search/Search.h" namespace "pcl::search":

###
# pcl_search target out
# cdef extern from "pcl/Search/brute_force.h" namespace "pcl::search":
#     cdef cppclass BruteForce[T]:
#         BruteForce()
# 
#         ctypedef typename Search<PointT>::PointCloud PointCloud;
#         ctypedef typename Search<PointT>::PointCloudConstPtr PointCloudConstPtr;
# 
#         ctypedef shared_ptr[vector[int]] IndicesPtr;
#         ctypedef shared_ptr[vector[int]] IndicesConstPtr;
# 
#         using Search<PointT>::input_;
#         using Search<PointT>::indices_;
#         using Search<PointT>::sorted_results_;
# 
#         cdef struct Entry
#             Entry(int , float)
#             Entry ()
#             unsigned index;
#             float distance;
# 
# 
#         # replace by some metric functor
#         float getDistSqr (const PointT& point1, const PointT& point2) const;
# 
#         # BruteForce (bool sorted_results = false)
#         # : Search<PointT> ("BruteForce", sorted_results)
#         # {
#         # }
# 
#         cdef int nearestKSearch (
#                                 const PointT &point, int k, 
#                                 std::vector<int> &k_indices, 
#                                 std::vector<float> &k_distances) const;
# 
#         cdef int radiusSearch (
#                                 const PointT& point, double radius,
#                                 std::vector<int> &k_indices, std::vector<float> &k_sqr_distances,
#                                 unsigned int max_nn = 0) const;
# 
# #         int denseKSearch (const PointT &point, int k, std::vector<int> &k_indices, std::vector<float> &k_distances) const;
# # 
# #         int
# #         sparseKSearch (const PointT &point, int k, std::vector<int> &k_indices, std::vector<float> &k_distances) const;
# # 
# #         int
# #         denseRadiusSearch (const PointT& point, double radius,
# #                            std::vector<int> &k_indices, std::vector<float> &k_sqr_distances,
# #                            unsigned int max_nn = 0) const;
# # 
# #         int
# #         sparseRadiusSearch (const PointT& point, double radius,
# #                             std::vector<int> &k_indices, std::vector<float> &k_sqr_distances,
# #                             unsigned int max_nn = 0) const;
# 
###

# pcl_search target out
# cdef extern from "pcl/Search/flann_search.h" namespace "pcl":
#     cdef cppclass FlannSearch[T]:
#         VoxelGrid()
#         void setLeafSize (float, float, float)
#         void setInputCloud (shared_ptr[cpp.PointCloud[T]])
#         void filter(cpp.PointCloud[T] c)
# 
#       # ctypedef typename Search<PointT>::PointCloud PointCloud;
#       # ctypedef typename Search<PointT>::PointCloudConstPtr PointCloudConstPtr;
# 
#       ctypedef sharedptr[vector[int]] IndicesPtr;
#       ctypedef sharedptr[vector[int]] IndicesConstPtr;
#       # ctypedef flann::NNIndex[FlannDistance] Index;
#       ctypedef sharedptr[flann::NNIndex[FlannDistance]] IndexPtr;
#       ctypedef sharedptr[flann::Matrix[float]] MatrixPtr;
#       ctypedef sharedptr[flann::Matrix[float]] MatrixConstPtr;
# 
#       # ctypedef pcl::PointRepresentation<PointT> PointRepresentation;
#       //typedef boost::shared_ptr<PointRepresentation> PointRepresentationPtr;
#       ctypedef sharedptr[PointRepresentation] PointRepresentationConstPtr;
# 
#       # using Search<PointT>::input_;
#       # using Search<PointT>::indices_;
#       # using Search<PointT>::sorted_results_;
#       public:
#         ctypedef sharedptr[FlannSearch[PointT]] Ptr;
#         ctypedef sharedptr[FlannSearch[PointT]] ConstPtr;
# 
#         # cdef cppclass FlannIndexCreator
#         #    virtual IndexPtr createIndex (MatrixConstPtr data)=0;
# 
#         # class KdTreeIndexCreator: public FlannIndexCreator
#         cdef cppclass KdTreeIndexCreator:
#             # KdTreeIndexCreator (unsigned int max_leaf_size=15)
#             KdTreeIndexCreator (unsigned int)
#             # virtual IndexPtr createIndex (MatrixConstPtr data);
# 
#         cdef FlannSearch (bool sorted = true, FlannIndexCreator* creator = new KdTreeIndexCreator());
# 
#         cdef void setEpsilon (double eps)
#         cdef double getEpsilon ()
# 
#         cdef void setInputCloud (const PointCloudConstPtr& cloud, const IndicesConstPtr& indices = IndicesConstPtr ());
# 
#         cdef int nearestKSearch (const PointT &point, int k, std::vector<int> &k_indices, std::vector<float> &k_sqr_distances) const;
# 
#         cdef void nearestKSearch (const PointCloud& cloud, const std::vector<int>& indices, int k, 
#                         std::vector< std::vector<int> >& k_indices, std::vector< std::vector<float> >& k_sqr_distances) const;
# 
#         cdef int radiusSearch (const PointT& point, double radius, 
#                       std::vector<int> &k_indices, std::vector<float> &k_sqr_distances,
#                       unsigned int max_nn = 0) const;
# 
#         cdef void radiusSearch (const PointCloud& cloud, const std::vector<int>& indices, double radius, std::vector< std::vector<int> >& k_indices,
#                         vector[vector[float]] k_sqr_distances, unsigned int max_nn=0) const;
# 
#         cdef void setPointRepresentation (const PointRepresentationConstPtr &point_representation)
#         cdef PointRepresentationConstPtr getPointRepresentation ()
# 
#         # protected:
#         # void convertInputToFlannMatrix();
#         # IndexPtr index_;
#         # FlannIndexCreator *creator_;
#         # MatrixPtr input_flann_;
#         # float eps_;
#         # bool input_copied_for_flann_;
#         # int dim_;
#         # std::vector<int> index_mapping_;
#         # bool identity_mapping_;
# 
###

cdef extern from "pcl/Search/kdtree.h" namespace "pcl::search":
    cdef cppclass KdTree[T]:
        # KdTree()
        KdTree (bool)
        # public:
        # ctypedef typename Search<PointT>::PointCloud PointCloud;
        # ctypedef typename Search<PointT>::PointCloudConstPtr PointCloudConstPtr;

        # ctypedef boost::shared_ptr<std::vector<int> > IndicesPtr;
        # ctypedef boost::shared_ptr<const std::vector<int> > IndicesConstPtr;

        # using pcl::search::Search<PointT>::indices_;
        # using pcl::search::Search<PointT>::input_;
        # using pcl::search::Search<PointT>::getIndices;
        # using pcl::search::Search<PointT>::getInputCloud;
        # using pcl::search::Search<PointT>::nearestKSearch;
        # using pcl::search::Search<PointT>::radiusSearch;
        # using pcl::search::Search<PointT>::sorted_results_;

        # typedef boost::shared_ptr<KdTree<PointT> > Ptr;
        # typedef boost::shared_ptr<const KdTree<PointT> > ConstPtr;

        # typedef boost::shared_ptr<pcl::KdTreeFLANN<PointT> > KdTreeFLANNPtr;
        # typedef boost::shared_ptr<const pcl::KdTreeFLANN<PointT> > KdTreeFLANNConstPtr;

        cdef void setSortedResults (bool sorted_results)
        cdef void setEpsilon (float eps)
        cdef float getEpsilon () const
        cdef void setInputCloud (const PointCloudConstPtr& cloud, const IndicesConstPtr& indices = IndicesConstPtr ())

        cdef int nearestKSearch (const PointT &point, int k, std::vector<int> &k_indices, std::vector<float> &k_sqr_distances) const
        cdef int radiusSearch (const PointT& point, double radius, 
                      std::vector<int> &k_indices, std::vector<float> &k_sqr_distances,
                      unsigned int max_nn = 0) const

        # protected:
        # KdTreeFLANNPtr tree_;

###

cdef extern from "pcl/Search/Octree.h" namespace "pcl::search":
    cdef cppclass Octree[T]:
        # Octree (const double resolution)
        Octree (double)
        # public:
        # ctypedef boost::shared_ptr<std::vector<int> > IndicesPtr;
        # ctypedef boost::shared_ptr<const std::vector<int> > IndicesConstPtr;

        # ctypedef pcl::PointCloud<PointT> PointCloud;
        # ctypedef boost::shared_ptr<PointCloud> PointCloudPtr;
        # ctypedef boost::shared_ptr<const PointCloud> PointCloudConstPtr;

        # ctypedef boost::shared_ptr<pcl::octree::OctreePointCloudSearch<PointT, LeafTWrap, BranchTWrap> > Ptr;
        # ctypedef boost::shared_ptr<const pcl::octree::OctreePointCloudSearch<PointT, LeafTWrap, BranchTWrap> > ConstPtr;
        # Ptr tree_;

        # using pcl::search::Search<PointT>::input_;
        # using pcl::search::Search<PointT>::indices_;
        # using pcl::search::Search<PointT>::sorted_results_;

        cdef void setInputCloud (const PointCloudConstPtr &cloud)
        cdef void setInputCloud (const PointCloudConstPtr &cloud, const IndicesConstPtr& indices)
        cdef int nearestKSearch (const PointCloud &cloud, int index, int k, std::vector<int> &k_indices,
                        std::vector<float> &k_sqr_distances) const
        cdef int nearestKSearch (const PointT &point, int k, std::vector<int> &k_indices,
                        std::vector<float> &k_sqr_distances) const
        cdef int nearestKSearch (int index, int k, std::vector<int> &k_indices, std::vector<float> &k_sqr_distances) const
        cdef int radiusSearch (
                            const PointCloud &cloud, 
                            int index, 
                            double radius,
                            std::vector<int> &k_indices, 
                            std::vector<float> &k_sqr_distances, 
                            unsigned int max_nn = 0) const

        cdef int radiusSearch (const PointT &p_q, 
                            double radius, 
                            std::vector<int> &k_indices,
                            std::vector<float> &k_sqr_distances, 
                            unsigned int max_nn = 0) const

        cdef int radiusSearch (
                            int index, double radius, vector[int] &k_indices,
                            vector[float] &k_sqr_distances, unsigned int max_nn = 0) const

        cdef void approxNearestSearch (
                            const PointCloudConstPtr &cloud, int query_index, int &result_index,
                            float &sqr_distance)
                            
        cdef void approxNearestSearch (
                            const PointT &p_q, int &result_index, float &sqr_distance)

        cdef void approxNearestSearch (
                            int query_index, int &result_index, float &sqr_distance)

###

cdef extern from "pcl/Search/organized.h" namespace "pcl::search":
    cdef cppclass OrganizedNeighbor[T]:
        # public:
        # ctypedef pcl::PointCloud<PointT> PointCloud;
        # ctypedef boost::shared_ptr<PointCloud> PointCloudPtr;

        # ctypedef boost::shared_ptr<const PointCloud> PointCloudConstPtr;
        # ctypedef boost::shared_ptr<const std::vector<int> > IndicesConstPtr;

        # ctypedef boost::shared_ptr<pcl::search::OrganizedNeighbor<PointT> > Ptr;
        # ctypedef boost::shared_ptr<const pcl::search::OrganizedNeighbor<PointT> > ConstPtr;

        # using pcl::search::Search<PointT>::indices_;
        # using pcl::search::Search<PointT>::sorted_results_;
        # using pcl::search::Search<PointT>::input_;

        # OrganizedNeighbor (bool sorted_results = false, float eps = 1e-4f, unsigned pyramid_level = 5)
        OrganizedNeighbor (bool, float, unsigned)

        cdef bool isValid () const
        cdef void computeCameraMatrix (Eigen::Matrix3f& camera_matrix) const;
        cdef void setInputCloud (const PointCloudConstPtr& cloud, const IndicesConstPtr &indices = IndicesConstPtr ())

        cdef int radiusSearch (
                                const PointT &p_q,
                                double radius,
                                std::vector<int> &k_indices,
                                std::vector<float> &k_sqr_distances,
                                unsigned int max_nn = 0) const;

        cdef void estimateProjectionMatrix ();

        cdef int nearestKSearch (
                        const PointT &p_q,
                        int k,
                        std::vector<int> &k_indices,
                        std::vector<float> &k_sqr_distances) const;

        cdef bool projectPoint (const PointT& p, pcl::PointXY& q) const;

        # protected:
        # cdef struct Entry
        #    Entry (int, float)
        #    Entry ()
        #    unsigned index
        #    float distance

        # cdef bool testPoint (const PointT& query, unsigned k, std::priority_queue<Entry>& queue, unsigned index) const
        # cdef void clipRange (int& begin, int &end, int min, int max) const
        # void getProjectedRadiusSearchBox (
        #                                   const PointT& point, float squared_radius, unsigned& minX, unsigned& minY,
        #                                   unsigned& maxX, unsigned& maxY) const;

        # template <typename MatrixType> void
        # makeSymmetric (MatrixType& matrix, bool use_upper_triangular = true) const;
        # Eigen::Matrix<float, 3, 4, Eigen::RowMajor> projection_matrix_;
        # Eigen::Matrix<float, 3, 3, Eigen::RowMajor> KR_;
        # Eigen::Matrix<float, 3, 3, Eigen::RowMajor> KR_KRT_;
        # const float eps_;
        # const unsigned pyramid_level_;
        # std::vector<unsigned char> mask_;
        # public:
        # EIGEN_MAKE_ALIGNED_OPERATOR_NEW
